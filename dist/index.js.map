{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar lnf = require( '@stdlib/math-base-special-lnf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes `x * ln(y)` so that the result is `0` if `x = 0` for single-precision floating-point numbers `x` and `y`.\n*\n* @param {number} x - input value\n* @param {number} y - input value\n* @returns {number} function value\n*\n* @example\n* var out = xlogyf( 3.0, 2.0 );\n* // returns ~2.079\n*\n* @example\n* var out = xlogyf( 1.5, 5.9 );\n* // returns ~2.662\n*\n* @example\n* var out = xlogyf( 0.9, 1.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogyf( 0.0, -2.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogyf( 1.5, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogyf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogyf( NaN, 2.3 );\n* // returns NaN\n*/\nfunction xlogyf( x, y ) {\n\tif ( x === 0.0 && !isnanf( y ) ) {\n\t\treturn 0.0;\n\t}\n\treturn float64ToFloat32( float64ToFloat32( x ) * lnf( float64ToFloat32( y ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = xlogyf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute `x * ln(y)` so that the result is `0` if `x = 0` for single-precision floating-point numbers `x` and `y`.\n*\n* @module @stdlib/math-base-special-xlogyf\n*\n* @example\n* var xlogyf = require( '@stdlib/math-base-special-xlogyf' );\n*\n* var out = xlogyf( 3.0, 2.0 );\n* // returns ~2.079\n*\n* out = xlogyf( 1.5, 5.9 );\n* // returns ~2.662\n*\n* out = xlogyf( 0.9, 1.0 );\n* // returns 0.0\n*\n* out = xlogyf( 0.0, -2.0 );\n* // returns 0.0\n*\n* out = xlogyf( 1.5, NaN );\n* // returns NaN\n*\n* out = xlogyf( 0.0, NaN );\n* // returns NaN\n*\n* out = xlogyf( NaN, 2.3 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAmB,QAAS,wCAAyC,EAwCzE,SAASC,EAAQC,EAAGC,EAAI,CACvB,OAAKD,IAAM,GAAO,CAACJ,EAAQK,CAAE,EACrB,EAEDH,EAAkBA,EAAkBE,CAAE,EAAIH,EAAKC,EAAkBG,CAAE,CAAE,CAAE,CAC/E,CAKAN,EAAO,QAAUI,ICtBjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnanf", "lnf", "float64ToFloat32", "xlogyf", "x", "y", "main"]
}
